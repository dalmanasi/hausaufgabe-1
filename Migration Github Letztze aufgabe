import os
import pygame
import random
import time

class Settings:
    WINDOW_WIDTH = 800
    WINDOW_HEIGHT = 600
    FPS = 60
    FILE_PATH = os.path.dirname(os.path.abspath(__file__))
    IMAGE_PATH = os.path.join(FILE_PATH, "images")


class MovingObject:
    def __init__(self, image_file, x, y, speedx, speedy, scale_size):
        self.image = pygame.image.load(os.path.join(Settings.IMAGE_PATH, image_file)).convert_alpha()
        self.image = pygame.transform.scale(self.image, scale_size)  # Skalierung des Bildes
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.speedx = speedx
        self.speedy = speedy

    def update(self):
        self.rect = self.rect.move(self.speedx, self.speedy)        
        # Pralle an den Wänden ab
        if self.rect.left < 0 or self.rect.right > Settings.WINDOW_WIDTH:
            self.speedx *= -1
        if self.rect.top < 0 or self.rect.bottom > Settings.WINDOW_HEIGHT:
            self.speedy *= -1

    def draw(self, screen):
        screen.blit(self.image, self.rect)


def create_asteroid():
    # Generiere zufällige Startposition und Geschwindigkeit für den Asteroiden
    x = random.randint(0, 100)  # Zufällige x-Position in den ersten 100 Pixeln
    y = random.randint(0, 100)  # Zufällige y-Position in den ersten 100 Pixeln
    speedx = random.choice([-3, -2, 2, 3])  # Zufällige horizontale Geschwindigkeit
    speedy = random.choice([-3, -2, 2, 3])  # Zufällige vertikale Geschwindigkeit
    return MovingObject("Asteroid.png", x, y, speedx, speedy, (50, 50))  # Größe anpassen, falls nötig


def main():
    pygame.init()
    screen = pygame.display.set_mode((Settings.WINDOW_WIDTH, Settings.WINDOW_HEIGHT))
    pygame.display.set_caption("Moving Objects Example")
    clock = pygame.time.Clock()

    # Hintergrund laden
    background_image = pygame.image.load(os.path.join(Settings.IMAGE_PATH, "background02.jpg")).convert()
    background_image = pygame.transform.scale(background_image, (Settings.WINDOW_WIDTH, Settings.WINDOW_HEIGHT))

    # Liste von Hindernissen (statisch)
    obstacles = [
        MovingObject("defender01.png", 50, 50, 0, 0, (50, 50)),  # Geschwindigkeit auf 0 setzen
        MovingObject("ufo.png", 200, 200, 0, 0, (70, 40)),       # Geschwindigkeit auf 0 setzen
        MovingObject("plane.webp", 400, 300, 0, 0, (80, 60)),    # Geschwindigkeit auf 0 setzen
        MovingObject("alien02.png", 300, 100, 0, 0, (60, 60)),   # Geschwindigkeit auf 0 setzen
        MovingObject("alienbig0101.png", 500, 400, 0, 0, (60, 50)),  # Geschwindigkeit auf 0 setzen
    ]

    # Liste zur Speicherung der Asteroiden
    asteroids = []

    # Zeitstempel für die Asteroid-Erzeugung
    last_asteroid_time = time.time()

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                running = False

        # Überprüfen, ob 2 Sekunden vergangen sind
        if time.time() - last_asteroid_time > 2:  # alle 2 Sekunden
            asteroids.append(create_asteroid())
            last_asteroid_time = time.time()  # Update den Zeitstempel

        # Update Asteroiden
        for asteroid in asteroids[:]:
            asteroid.update()

            # Überprüfen auf Kollision mit Hindernissen
            for obstacle in obstacles[:]:  # Kopie der Liste der Hindernisse durchlaufen
                if asteroid.rect.colliderect(obstacle.rect):
                    asteroids.remove(asteroid)  # Asteroid entfernen
                    obstacles.remove(obstacle)  # Hindernis entfernen
                    break  # Nach dem Entfernen die Schleife beenden

        # Zeichne alles auf dem Bildschirm
        screen.blit(background_image, (0, 0))
        for obj in obstacles:
            obj.draw(screen)  # Statische Hindernisse zeichnen
        for asteroid in asteroids:
            asteroid.draw(screen)  # Bewegende Asteroiden zeichnen

        pygame.display.flip()
        clock.tick(Settings.FPS)

    pygame.quit()


if __name__ == "__main__":
    main()